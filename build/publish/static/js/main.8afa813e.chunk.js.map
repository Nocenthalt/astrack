{"version":3,"sources":["Components/navbar.js","Components/bg.js","Routes/main.js","Components/starmap.js","Routes/map.js","Routes/router.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","href","type","id","htmlFor","Background","react_particles_js_default","params","particles","number","value","density","enable","value_area","line_linked","opacity","move","direction","speed","size","anim","Math","round","random","opacity_min","interactivity","events","onclick","mode","modes","push","particles_nb","retina_detect","Main","Components_navbar","Components_bg","Starmap","_useState","useState","_useState2","Object","slicedToArray","isFetching","setIsFetching","_useState3","_useState4","setParams","_useState5","width","height","_useState6","view","setView","useEffect","_ref","asyncToGenerator","regenerator_default","mark","_callee","_ref2","longitude","latitude","altitude","wrap","_context","prev","next","Promise","resolve","rejection","navigator","geolocation","getCurrentPosition","position","coords","failure","message","startsWith","console","log","sent","window","innerWidth","innerHeight","stop","apply","this","arguments","fetchData","resizeHandle","useCallback","addEventListener","removeEventListener","title","frameBorder","allowtransparency","scrolling","marginHeight","marginWidth","src","concat","Map","Components_starmap","routes","/","main","/map","Routes_map","App","useRoutes","Routes","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8afa813e.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../Styles/navbar.css'\r\n\r\n//Navbar by Jonevinothjoseph\r\nfunction Navbar(){\r\n  //Redirect to homepage with JS. Adding HTML and CSS is too much work.\r\n  \r\n  return(\r\n    <div className=\"nav\">\r\n        <header className=\"header\">\r\n      <a href=\"/\" className=\"logo\">Astra<span className=\"title-color\">ck</span></a>\r\n      <input className=\"menu-btn\" type=\"checkbox\" id=\"menu-btn\" />\r\n      <label className=\"menu-icon\" htmlFor=\"menu-btn\"><span className=\"navicon\"></span></label>\r\n      <ul className=\"menu\">\r\n        <li><a href=\"#work\">Our Work</a></li>\r\n        <li><a href=\"#about\">About</a></li>\r\n        <li><a href=\"#careers\">Careers</a></li>\r\n        <li><a href=\"#contact\">Contact</a></li>\r\n      </ul>\r\n    </header>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Navbar","import React from \"react\";\r\nimport Particles from 'react-particles-js';\r\nimport '../Styles/bg.css';\r\n\r\nfunction randAni(){\r\n  return 1 + Math.round(Math.random() * 5)\r\n}\r\n\r\nfunction Background() {\r\n  return (\r\n    <div>\r\n      <Particles\r\n      className = \"bg-particles\"\r\n      params={{\r\n        \"particles\": {\r\n          \"number\": {\r\n            \"value\": 60,\r\n            \"density\": {\r\n              \"enable\": true,\r\n              \"value_area\": 1500\r\n            }\r\n          },\r\n          \"line_linked\": {\r\n            \"enable\": true,\r\n            \"opacity\": 0.15\r\n          },\r\n          \"move\": {\r\n            \"direction\": \"right\",\r\n            \"speed\": 0.15\r\n          },\r\n          \"size\": {\r\n            \"value\": 1.5\r\n          },\r\n          \"opacity\": {\r\n            \"anim\": {\r\n              \"enable\": true,\r\n              \"speed\": randAni(),\r\n              \"opacity_min\": 0.7\r\n            }\r\n          }\r\n        },\r\n        \"interactivity\": {\r\n            \"events\": {\r\n              \"onclick\": {\r\n                \"enable\": true,\r\n                \"mode\": \"push\"\r\n              }\r\n            },\r\n            \"modes\": {\r\n              \"push\": {\r\n                \"particles_nb\": 1\r\n              }\r\n            }\r\n        },\r\n        \"retina_detect\": true\r\n      }} />\r\n\r\n      <div className=\"bg-text\">\r\n        <h1>Get today's star chart with just one click !</h1>\r\n        <a href=\"/map\"><button className=\"bg-btn\" >Click here</button></a>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default Background","import React from 'react';\r\nimport Navbar from '../Components/navbar'\r\nimport Background from '../Components/bg'\r\n\r\nfunction Main(){\r\n  return(\r\n  <div>\r\n    <Navbar/>\r\n    <Background />\r\n  </div>)\r\n}\r\n\r\nexport default Main","import React, {useEffect, useState, useCallback} from 'react';\r\nimport '../Styles/starmap.css'\r\n\r\nfunction Starmap(){\r\n    let [isFetching, setIsFetching] = useState(false);\r\n    let [params, setParams] = useState({});\r\n    let [view, setView] = useState({width: 0, height: 0});\r\n\r\n    //Request user's geological location\r\n    useEffect(() => {   \r\n        const fetchData = async () => {    \r\n            const {longitude, latitude, altitude} = await new Promise ((resolve, rejection) => {\r\n                navigator.geolocation.getCurrentPosition(\r\n                    (position) => {\r\n                        //resolve data if got position\r\n                        setIsFetching(true);\r\n                        resolve(position.coords);\r\n                    },\r\n                    failure => {\r\n                        if(failure.message.startsWith(\"Only secure origins are allowed\")){\r\n                            console.log(failure.message)\r\n                        }\r\n                        setIsFetching(false)}\r\n                )\r\n            })\r\n            setParams({longitude,latitude,altitude})\r\n            setView({width: window.innerWidth, height: window.innerHeight - 60});\r\n        }\r\n    fetchData();\r\n    }, [])\r\n    \r\n    //Handle window resizing\r\n    const resizeHandle = useCallback(() => {\r\n        setView({width: window.innerWidth, height: window.innerHeight - 60});\r\n      }, []);\r\n    \r\n    useEffect(() => {\r\n        window.addEventListener('resize', resizeHandle);\r\n        return () => window.removeEventListener('resize', resizeHandle);\r\n      }, [resizeHandle]);\r\n    \r\n    \r\n    return isFetching ?\r\n        (\r\n        <div id=\"starmap\">\r\n            <iframe title=\"starmap\"\r\n                width={view.width}\r\n                height={view.height}\r\n                frameBorder=\"0\"\r\n                allowtransparency=\"true\"\r\n                scrolling=\"no\"\r\n                marginHeight=\"0\"\r\n                marginWidth=\"0\"\r\n                src={`https://virtualsky.lco.global/embed/index.html?longitude=${params.longitude}&latitude=${params.latitude}&live=true&gradient=false&scalestars=1.1&showstarlabels=true&showstarlabels=true&showplanetlabels=true&showdate=false&projection=stereo&constellations=true&constellationlabels=true&az=0`}\r\n            ></iframe>\r\n        </div>\r\n        )\r\n        :(<h1 className=\"warning\">Please enable location for this to work</h1>)\r\n}\r\n\r\nexport default Starmap","import React from 'react'\r\nimport Navbar from '../Components/navbar'\r\nimport Starmap from '../Components/starmap'\r\n\r\nfunction Map(){\r\n    return(\r\n    <div>\r\n      <Navbar />\r\n      <Starmap />\r\n    </div>)\r\n}\r\n  \r\n\r\nexport default Map","import Main from './main'\r\nimport Map from './map'\r\nimport React from 'react'\r\nconst routes = {\r\n    \"/\": () => <Main />, \r\n    \"/map\": () => <Map />\r\n  };\r\n\r\n  export default routes;\r\n","import Routes from './Routes/router'\r\nimport {useRoutes} from 'hookrouter';\r\n\r\nfunction App() {\r\n  const routeResult = useRoutes(Routes)\r\n  return routeResult\r\n}\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './Styles/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}